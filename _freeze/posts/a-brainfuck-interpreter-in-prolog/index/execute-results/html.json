{
  "hash": "a407d1c4f244bd7c523668430213bf20",
  "result": {
    "markdown": "---\ntitle: \"A Brainf*ck Interpreter in Prolog\"\ndescription: \"An esoteric programming language interpreter written in a slightly less esoteric programming language.\"\nauthor: \"Aswin van Woudenberg\"\ndate: \"2007-01-05\"\ncategories: [programming, esoteric, prolog]\nimage: \"image.jpg\"\ntoc: true\n---\n\nIf you're a programmer then you must be a masochist. After all, what kind of person enjoys staring at a screen for hours on end, squinting at lines of code that seem to blend together like a modern art painting? What kind of person willingly submits themselves to the endless frustration of debugging, only to find that the solution was something as simple as a missing semicolon? \n\nIf this is you then you're going to love [Brainfuck](http://en.wikipedia.org/wiki/Brainfuck) - the programming language that's minimalistic to the point of absurdity. With only eight commands, Brainfuck is both challenging and frustrating for even the most experienced programmers.\n\n## How does Brainfuck work?\n\nBrainfuck programs operate on a memory tape consisting of an array of cells, each containing a single byte. With the tape initially set to zero, Brainfuck programs modify the values in the memory cells, move the pointer left and right along the tape, and perform input and output operations using its eight commands.\n\n## Commands\n\nHere's a breakdown of the available commands in Brainfuck:\n\n* `<`: Move the pointer one cell to the left.\n* `>`: Move the pointer one cell to the right.\n* `+`: Increment the value of the cell the pointer is pointing to by one.\n* `-`: Decrement the value of the cell the pointer is pointing to by one.\n* `.`: Output the value of the cell the pointer is pointing to.\n* `,`: Input a byte and store its value in the cell the pointer is pointing to.\n* `[`: If the value of the cell the pointer is pointing to is zero, jump forward to the corresponding `]` command.\n* `]`: If the value of the cell the pointer is pointing to is non-zero, jump back to the corresponding `[` command.\n\nDue to its minimalistic syntax, Brainfuck is used to challenge and amuse programmers. I'll be honest - programming in Brainfuck is an absolute nightmare. Writing an interpreter for it is easy though.\n\n## Using the interpreter\n\nYou can download my Brainfuck interpreter from [here](https://github.com/afvanwoudenberg/bf).\n\nThe Prolog program provided, `bf.pl`, is the interpreter. It defines a number of Prolog predicates that can be used to interpret Brainfuck programs. The interpreter uses a list to represent the memory tape, and provides predicates for setting and getting the values of cells, as well as for incrementing and decrementing cell values. \n\nThe main predicate, `run(Prog)`, takes a list of Brainfuck commands as input and interprets the program. It uses a helper predicate, `sequence/4`, to recursively process each command in the program, updating the memory tape and pointer as necessary.\n\nMy interpreter isn't the fastest, but it does have dynamic memory tape length. Most other interpreters have a fixed tape length of (usually) 30,000 cells.\n\n## Running Brainfuck programs\n\nI've included a couple of example programs taken from [The Brainfuck Archive](http://esoteric.sange.fi/brainfuck/), including a \"Hello World!\" program. To execute a Brainfuck program using the interpreter, you can use the `run_bf_program/1` predicate which in turn uses the `run/1` predicate. \n\nFor example, to run the \"Hello World!\" program, you first start the SWI-Prolog interpreter by opening up a terminal and typing:\n\n\n```{sh}\nswipl\n```\n\n\nThis will start the Prolog interpreter. You can then load the Brainfuck interpreter by typing:\n\n\n```{prolog}\n[bf].\n```\n\n\nThis loads the `bf.pl` file into the interpreter. You can then run a Brainfuck program using the `run_bf_program/1` predicate, like so:\n\n\n```{prolog}\nrun_bf_program('hellobf.bf').\n```\n\n\nThis will run the `hellobf.bf` program and output the famous \"Hello World!\" message to the console.\n\nAlternatively, you can execute these three steps at once by typing:\n\n\n```{sh}\nswipl -s bf.pl -g \"run_bf_program('hellobf.bf'), halt.\"\n```\n\n\nAdding `halt` will make the Prolog interpreter exit after the Brainfuck `run_bf_program/1` predicate has finished.\n\nYou can also run Brainfuck code directly like this:\n\n\n```{sh}\nswipl -s bf.pl -g \"atom_chars('++++[++++>---<]>-.---[----->+<]>-.+++[->+++<]>++.++++++++.+++++.--------.---[->+++<]>+.-[--->+<]>.++++++++.',Chars), run(Chars), halt.\"\n```\n\n\nHappy coding and good luck with your sanity!\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}